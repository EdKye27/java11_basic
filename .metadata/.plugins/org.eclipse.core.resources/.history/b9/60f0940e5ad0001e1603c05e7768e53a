package org.kh.site;
//대입 연산자 : 연산 후에 대입하는 연산자 +=. -=. *=, /=, %=, &=, |=(2진수 연산), <<=, >>=, ^= 
//비트 연산자 : &(and), |(or), ~(complement), ^(xor), >>(>>>, right shift), <<(left shift)
public class Operation7 {

	public static void main(String[] args) {
		int a = 20;
		int b = 15;
		int tmp;	//tmp =임시기억장소
		
		a += b;		// a=35, b=15
		b -= a;		// a=35, b=-20
		System.out.println("a = "+a);
		System.out.println("b = "+b);
		
		// a와 b의 값을 맞교환 하려면..
		tmp = a;	// 여기서 = 는 같다가 아닌, 입력하는 의미!
		a = b;
		b = tmp;
		System.out.println("******** 교환 후 *********");
		System.out.println("a = "+a);
		System.out.println("b = "+b);
		
		//비트(2진수) 연산
		int x = 0b01101;
		int y = 0b01011;
//		System.out.println("x = "+x);	// 이렇게 하면 10진수로 출력된다
//		System.out.println("y = "+y);	// 이렇게 하면 10진수로 출력된다
		System.out.println("x = "+Integer.toBinaryString(x));	//2진수로 출력하기!
		System.out.println("y = "+Integer.toBinaryString(y));	
		System.out.println("x & y : "+Integer.toBinaryString(x & y));	//and
		System.out.println("x | y : "+Integer.toBinaryString(x | y));	//or
		System.out.println("x ^ y : "+Integer.toBinaryString(x ^ y));	//xor : 한쪽이 1이면 무조건 1, 2진수 계산기에 쓰인다 (0,1로만 표현되기에 2로 넘어가지 못하고 다음 자리수로 표기)
		System.out.println("~x : "+Integer.toBinaryString(~x));	//~는 not 을 의미 즉, 반대로 출력되게 된다
		// shift 연산 알아보기 : shift 연산이 쓰여지는 것은 나누기, 곱하기를 위해 쓰인다
		System.out.println("x >> 2 : "+Integer.toBinaryString(x >> 2));	// shift 연산은 주어진 수의 비트를 지정된 수만큼 이동시키는 것을 의미, x >> 2는 x의 비트를 오른쪽으로 2칸 이동시킨 결과를 반환합니다.
		System.out.println("x << 2 : "+Integer.toBinaryString(x << 2));
		System.out.println("************ 대입 연산자 *************)");
		
		int i = 25;		// 0b11001
		int j = 30;		// 0b11110
		i &= j;			// i = i & j 즉, 11000이 출력된다
		System.out.println("i &= j : "+i);
		
		i = 25;
		i |= j; 		// 0b11111 → 31
		System.out.println("i |= j : "+i);
		
		i = 25;
		i ^= j;			// 0b00111 → 7 
		System.out.println("i ^= j : "+i);
		
		j >>= 2;		// 0b11110 을 2자리 시프트 시켜서 0b111
		System.out.println("j >>= 2 : "+j);
	}

	
}
